package leetcode.bitwise_operation.sub0342;

public class Demo01 {
    public static void main(String[] args) {
        Solution solution = new Demo01().new Solution();
        System.out.println(solution.isPowerOfFour(16) + " = true");
        System.out.println(solution.isPowerOfFour(5) + " = false");
        System.out.println(solution.isPowerOfFour(1) + " = true");
        System.out.println(solution.isPowerOfFour(-2147483648) + " = false");
        System.out.println(solution.isPowerOfFour(-64) + " = false");
        /**
         * n                        二进制                                         -n
         * 1        (0000 0000 0000 0000 0000 0000 0000 0001)   (1111 1111 1111 1111 1111 1111 1111 1111)
         * 4        (0000 0000 0000 0000 0000 0000 0000 0100)   (1111 1111 1111 1111 1111 1111 1111 1100)
         * 16       (0000 0000 0000 0000 0000 0000 0001 0000)   (1111 1111 1111 1111 1111 1111 1111 0000)
         * 64       (0000 0000 0000 0000 0000 0000 0100 0000)   (1111 1111 1111 1111 1111 1111 1100 0000)
         * 256	    (0000 0000 0000 0000 0000 0001 0000 0000)   (1111 1111 1111 1111 1111 1111 0000 0000)
         * 1024	    (0000 0000 0000 0000 0000 0100 0000 0000)   (1111 1111 1111 1111 1111 1100 0000 0000)
         * 4096	    (0000 0000 0000 0000 0001 0000 0000 0000)   (1111 1111 1111 1111 1111 0000 0000 0000)
         * 16384	(0000 0000 0000 0000 0100 0000 0000 0000)   (1111 1111 1111 1111 1100 0000 0000 0000)
         * 65536	(0000 0000 0000 0001 0000 0000 0000 0000)   (1111 1111 1111 1111 0000 0000 0000 0000)
         * 262144	(0000 0000 0000 0100 0000 0000 0000 0000)   (1111 1111 1111 1100 0000 0000 0000 0000)
         */
    }

    class Solution {
        public boolean isPowerOfFour(int n) {
            /**
             * 1、n 要为正数
             * 2、n 是 2 的幂次方
             * 3、二进制表示中，只有 一个 1，且只出现在奇数位
             *   即：`n & 1010 1010 == 0`
             */
            return n > 0
                    && (n & (-n)) == n
                    && (n & 0xaaaaaaaa) == 0;
        }
    }
}
